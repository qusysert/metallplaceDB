// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modify_docx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModifyDocxClient is the client API for ModifyDocx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModifyDocxClient interface {
	ModifyDocx(ctx context.Context, in *ModifyDocxRequest, opts ...grpc.CallOption) (*ModifiedDocxResponse, error)
	TestFunc(ctx context.Context, in *TestFuncRequest, opts ...grpc.CallOption) (*TestFuncResponse, error)
}

type modifyDocxClient struct {
	cc grpc.ClientConnInterface
}

func NewModifyDocxClient(cc grpc.ClientConnInterface) ModifyDocxClient {
	return &modifyDocxClient{cc}
}

func (c *modifyDocxClient) ModifyDocx(ctx context.Context, in *ModifyDocxRequest, opts ...grpc.CallOption) (*ModifiedDocxResponse, error) {
	out := new(ModifiedDocxResponse)
	err := c.cc.Invoke(ctx, "/modify_docx.ModifyDocx/ModifyDocx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyDocxClient) TestFunc(ctx context.Context, in *TestFuncRequest, opts ...grpc.CallOption) (*TestFuncResponse, error) {
	out := new(TestFuncResponse)
	err := c.cc.Invoke(ctx, "/modify_docx.ModifyDocx/TestFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModifyDocxServer is the server API for ModifyDocx service.
// All implementations must embed UnimplementedModifyDocxServer
// for forward compatibility
type ModifyDocxServer interface {
	ModifyDocx(context.Context, *ModifyDocxRequest) (*ModifiedDocxResponse, error)
	TestFunc(context.Context, *TestFuncRequest) (*TestFuncResponse, error)
	mustEmbedUnimplementedModifyDocxServer()
}

// UnimplementedModifyDocxServer must be embedded to have forward compatible implementations.
type UnimplementedModifyDocxServer struct {
}

func (UnimplementedModifyDocxServer) ModifyDocx(context.Context, *ModifyDocxRequest) (*ModifiedDocxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDocx not implemented")
}
func (UnimplementedModifyDocxServer) TestFunc(context.Context, *TestFuncRequest) (*TestFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFunc not implemented")
}
func (UnimplementedModifyDocxServer) mustEmbedUnimplementedModifyDocxServer() {}

// UnsafeModifyDocxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModifyDocxServer will
// result in compilation errors.
type UnsafeModifyDocxServer interface {
	mustEmbedUnimplementedModifyDocxServer()
}

func RegisterModifyDocxServer(s grpc.ServiceRegistrar, srv ModifyDocxServer) {
	s.RegisterService(&ModifyDocx_ServiceDesc, srv)
}

func _ModifyDocx_ModifyDocx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDocxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyDocxServer).ModifyDocx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modify_docx.ModifyDocx/ModifyDocx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyDocxServer).ModifyDocx(ctx, req.(*ModifyDocxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyDocx_TestFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFuncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyDocxServer).TestFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modify_docx.ModifyDocx/TestFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyDocxServer).TestFunc(ctx, req.(*TestFuncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModifyDocx_ServiceDesc is the grpc.ServiceDesc for ModifyDocx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModifyDocx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modify_docx.ModifyDocx",
	HandlerType: (*ModifyDocxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifyDocx",
			Handler:    _ModifyDocx_ModifyDocx_Handler,
		},
		{
			MethodName: "TestFunc",
			Handler:    _ModifyDocx_TestFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modify_docx.proto",
}
